// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: comet.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "comet.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace eglcomet {

namespace {

const ::google::protobuf::Descriptor* AdminLogin_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AdminLogin_reflection_ = NULL;
const ::google::protobuf::Descriptor* AdminResp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AdminResp_reflection_ = NULL;
const ::google::protobuf::Descriptor* C2SLogin_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  C2SLogin_reflection_ = NULL;
const ::google::protobuf::Descriptor* S2CLogin_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  S2CLogin_reflection_ = NULL;
const ::google::protobuf::Descriptor* OnlineStatus_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OnlineStatus_reflection_ = NULL;
const ::google::protobuf::Descriptor* CtrlMedia_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CtrlMedia_reflection_ = NULL;
const ::google::protobuf::Descriptor* SongList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SongList_reflection_ = NULL;
const ::google::protobuf::Descriptor* Song_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Song_reflection_ = NULL;
const ::google::protobuf::Descriptor* Msg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Msg_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgQuery_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgQuery_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgResp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgResp_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReqCheckTokenByID_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReqCheckTokenByID_reflection_ = NULL;
const ::google::protobuf::Descriptor* RspCheckTokenByID_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RspCheckTokenByID_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReqCheckRelationByID_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReqCheckRelationByID_reflection_ = NULL;
const ::google::protobuf::Descriptor* RspCheckRelationByID_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RspCheckRelationByID_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReqPacket_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReqPacket_reflection_ = NULL;
const ::google::protobuf::Descriptor* RspPacket_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RspPacket_reflection_ = NULL;
const ::google::protobuf::Descriptor* RspRsaKey_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RspRsaKey_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* MaskCode_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_comet_2eproto() {
  protobuf_AddDesc_comet_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "comet.proto");
  GOOGLE_CHECK(file != NULL);
  AdminLogin_descriptor_ = file->message_type(0);
  static const int AdminLogin_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AdminLogin, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AdminLogin, passwd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AdminLogin, user_agent_),
  };
  AdminLogin_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AdminLogin_descriptor_,
      AdminLogin::default_instance_,
      AdminLogin_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AdminLogin, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AdminLogin, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AdminLogin));
  AdminResp_descriptor_ = file->message_type(1);
  static const int AdminResp_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AdminResp, code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AdminResp, msg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AdminResp, port_),
  };
  AdminResp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AdminResp_descriptor_,
      AdminResp::default_instance_,
      AdminResp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AdminResp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AdminResp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AdminResp));
  C2SLogin_descriptor_ = file->message_type(2);
  static const int C2SLogin_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2SLogin, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2SLogin, token_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2SLogin, user_agent_),
  };
  C2SLogin_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      C2SLogin_descriptor_,
      C2SLogin::default_instance_,
      C2SLogin_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2SLogin, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2SLogin, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(C2SLogin));
  S2CLogin_descriptor_ = file->message_type(3);
  static const int S2CLogin_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2CLogin, code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2CLogin, msg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2CLogin, ping_time_),
  };
  S2CLogin_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      S2CLogin_descriptor_,
      S2CLogin::default_instance_,
      S2CLogin_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2CLogin, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2CLogin, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(S2CLogin));
  OnlineStatus_descriptor_ = file->message_type(4);
  static const int OnlineStatus_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OnlineStatus, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OnlineStatus, status_),
  };
  OnlineStatus_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      OnlineStatus_descriptor_,
      OnlineStatus::default_instance_,
      OnlineStatus_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OnlineStatus, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OnlineStatus, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(OnlineStatus));
  CtrlMedia_descriptor_ = file->message_type(5);
  static const int CtrlMedia_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CtrlMedia, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CtrlMedia, args_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CtrlMedia, arg_bytes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CtrlMedia, seq_),
  };
  CtrlMedia_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CtrlMedia_descriptor_,
      CtrlMedia::default_instance_,
      CtrlMedia_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CtrlMedia, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CtrlMedia, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CtrlMedia));
  SongList_descriptor_ = file->message_type(6);
  static const int SongList_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SongList, song_list_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SongList, song_list_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SongList, song_list_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SongList, songs_),
  };
  SongList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SongList_descriptor_,
      SongList::default_instance_,
      SongList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SongList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SongList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SongList));
  Song_descriptor_ = file->message_type(7);
  static const int Song_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Song, song_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Song, song_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Song, source_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Song, singers_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Song, pic_url_),
  };
  Song_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Song_descriptor_,
      Song::default_instance_,
      Song_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Song, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Song, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Song));
  Msg_descriptor_ = file->message_type(8);
  static const int Msg_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Msg, msg_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Msg, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Msg, args_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Msg, arg_bytes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Msg, date_),
  };
  Msg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Msg_descriptor_,
      Msg::default_instance_,
      Msg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Msg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Msg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Msg));
  MsgQuery_descriptor_ = file->message_type(9);
  static const int MsgQuery_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgQuery, opt_),
  };
  MsgQuery_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgQuery_descriptor_,
      MsgQuery::default_instance_,
      MsgQuery_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgQuery, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgQuery, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgQuery));
  MsgResp_descriptor_ = file->message_type(10);
  static const int MsgResp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgResp, msg_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgResp, code_),
  };
  MsgResp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgResp_descriptor_,
      MsgResp::default_instance_,
      MsgResp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgResp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgResp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgResp));
  MsgNotify_descriptor_ = file->message_type(11);
  static const int MsgNotify_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgNotify, msg_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgNotify, msg_content_),
  };
  MsgNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgNotify_descriptor_,
      MsgNotify::default_instance_,
      MsgNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgNotify));
  ReqCheckTokenByID_descriptor_ = file->message_type(12);
  static const int ReqCheckTokenByID_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqCheckTokenByID, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqCheckTokenByID, token_),
  };
  ReqCheckTokenByID_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReqCheckTokenByID_descriptor_,
      ReqCheckTokenByID::default_instance_,
      ReqCheckTokenByID_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqCheckTokenByID, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqCheckTokenByID, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReqCheckTokenByID));
  RspCheckTokenByID_descriptor_ = file->message_type(13);
  static const int RspCheckTokenByID_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspCheckTokenByID, rescode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspCheckTokenByID, resmsg_),
  };
  RspCheckTokenByID_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RspCheckTokenByID_descriptor_,
      RspCheckTokenByID::default_instance_,
      RspCheckTokenByID_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspCheckTokenByID, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspCheckTokenByID, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RspCheckTokenByID));
  ReqCheckRelationByID_descriptor_ = file->message_type(14);
  static const int ReqCheckRelationByID_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqCheckRelationByID, fromid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqCheckRelationByID, toid_),
  };
  ReqCheckRelationByID_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReqCheckRelationByID_descriptor_,
      ReqCheckRelationByID::default_instance_,
      ReqCheckRelationByID_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqCheckRelationByID, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqCheckRelationByID, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReqCheckRelationByID));
  RspCheckRelationByID_descriptor_ = file->message_type(15);
  static const int RspCheckRelationByID_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspCheckRelationByID, rescode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspCheckRelationByID, resmsg_),
  };
  RspCheckRelationByID_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RspCheckRelationByID_descriptor_,
      RspCheckRelationByID::default_instance_,
      RspCheckRelationByID_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspCheckRelationByID, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspCheckRelationByID, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RspCheckRelationByID));
  ReqPacket_descriptor_ = file->message_type(16);
  static const int ReqPacket_offsets_[11] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqPacket, mask_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqPacket, udi_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqPacket, action_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqPacket, params_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqPacket, reqno_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqPacket, chnno_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqPacket, chnpos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqPacket, clientid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqPacket, clientpos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqPacket, clientver_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqPacket, rsakeyver_),
  };
  ReqPacket_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReqPacket_descriptor_,
      ReqPacket::default_instance_,
      ReqPacket_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqPacket, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqPacket, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReqPacket));
  RspPacket_descriptor_ = file->message_type(17);
  static const int RspPacket_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspPacket, mask_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspPacket, rescode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspPacket, resmsg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspPacket, action_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspPacket, params_),
  };
  RspPacket_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RspPacket_descriptor_,
      RspPacket::default_instance_,
      RspPacket_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspPacket, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspPacket, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RspPacket));
  RspRsaKey_descriptor_ = file->message_type(18);
  static const int RspRsaKey_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspRsaKey, rsaver_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspRsaKey, rsakey_),
  };
  RspRsaKey_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RspRsaKey_descriptor_,
      RspRsaKey::default_instance_,
      RspRsaKey_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspRsaKey, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspRsaKey, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RspRsaKey));
  MaskCode_descriptor_ = file->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_comet_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AdminLogin_descriptor_, &AdminLogin::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AdminResp_descriptor_, &AdminResp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    C2SLogin_descriptor_, &C2SLogin::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    S2CLogin_descriptor_, &S2CLogin::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    OnlineStatus_descriptor_, &OnlineStatus::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CtrlMedia_descriptor_, &CtrlMedia::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SongList_descriptor_, &SongList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Song_descriptor_, &Song::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Msg_descriptor_, &Msg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgQuery_descriptor_, &MsgQuery::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgResp_descriptor_, &MsgResp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgNotify_descriptor_, &MsgNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReqCheckTokenByID_descriptor_, &ReqCheckTokenByID::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RspCheckTokenByID_descriptor_, &RspCheckTokenByID::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReqCheckRelationByID_descriptor_, &ReqCheckRelationByID::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RspCheckRelationByID_descriptor_, &RspCheckRelationByID::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReqPacket_descriptor_, &ReqPacket::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RspPacket_descriptor_, &RspPacket::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RspRsaKey_descriptor_, &RspRsaKey::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_comet_2eproto() {
  delete AdminLogin::default_instance_;
  delete AdminLogin_reflection_;
  delete AdminResp::default_instance_;
  delete AdminResp_reflection_;
  delete C2SLogin::default_instance_;
  delete C2SLogin_reflection_;
  delete S2CLogin::default_instance_;
  delete S2CLogin_reflection_;
  delete OnlineStatus::default_instance_;
  delete OnlineStatus_reflection_;
  delete CtrlMedia::default_instance_;
  delete CtrlMedia_reflection_;
  delete SongList::default_instance_;
  delete SongList_reflection_;
  delete Song::default_instance_;
  delete Song_reflection_;
  delete Msg::default_instance_;
  delete Msg_reflection_;
  delete MsgQuery::default_instance_;
  delete MsgQuery_reflection_;
  delete MsgResp::default_instance_;
  delete MsgResp_reflection_;
  delete MsgNotify::default_instance_;
  delete MsgNotify_reflection_;
  delete ReqCheckTokenByID::default_instance_;
  delete ReqCheckTokenByID_reflection_;
  delete RspCheckTokenByID::default_instance_;
  delete RspCheckTokenByID_reflection_;
  delete ReqCheckRelationByID::default_instance_;
  delete ReqCheckRelationByID_reflection_;
  delete RspCheckRelationByID::default_instance_;
  delete RspCheckRelationByID_reflection_;
  delete ReqPacket::default_instance_;
  delete ReqPacket_reflection_;
  delete RspPacket::default_instance_;
  delete RspPacket_reflection_;
  delete RspRsaKey::default_instance_;
  delete RspRsaKey_reflection_;
}

void protobuf_AddDesc_comet_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\013comet.proto\022\010eglcomet\"<\n\nAdminLogin\022\n\n"
    "\002id\030\001 \002(\t\022\016\n\006passwd\030\002 \002(\t\022\022\n\nuser_agent\030"
    "\003 \001(\t\"4\n\tAdminResp\022\014\n\004code\030\001 \002(\005\022\013\n\003msg\030"
    "\002 \001(\t\022\014\n\004port\030\003 \001(\005\"9\n\010C2SLogin\022\n\n\002id\030\001 "
    "\002(\003\022\r\n\005token\030\002 \002(\t\022\022\n\nuser_agent\030\003 \001(\t\"8"
    "\n\010S2CLogin\022\014\n\004code\030\001 \002(\005\022\013\n\003msg\030\002 \001(\t\022\021\n"
    "\tping_time\030\003 \002(\005\"*\n\014OnlineStatus\022\n\n\002id\030\001"
    " \003(\t\022\016\n\006status\030\002 \001(\014\"F\n\tCtrlMedia\022\013\n\003cmd"
    "\030\001 \002(\005\022\014\n\004args\030\002 \003(\t\022\021\n\targ_bytes\030\003 \001(\014\022"
    "\013\n\003seq\030\004 \001(\005\"o\n\010SongList\022\024\n\014song_list_id"
    "\030\001 \002(\t\022\026\n\016song_list_type\030\002 \002(\005\022\026\n\016song_l"
    "ist_name\030\003 \001(\t\022\035\n\005songs\030\004 \003(\0132\016.eglcomet"
    ".Song\"\\\n\004Song\022\017\n\007song_id\030\001 \002(\t\022\021\n\tsong_n"
    "ame\030\002 \002(\t\022\016\n\006source\030\003 \002(\005\022\017\n\007singers\030\004 \001"
    "(\t\022\017\n\007pic_url\030\005 \001(\t\"R\n\003Msg\022\016\n\006msg_id\030\001 \002"
    "(\003\022\014\n\004type\030\002 \002(\005\022\014\n\004args\030\003 \003(\t\022\021\n\targ_by"
    "tes\030\004 \001(\014\022\014\n\004date\030\005 \001(\003\"\027\n\010MsgQuery\022\013\n\003o"
    "pt\030\001 \001(\t\"\'\n\007MsgResp\022\016\n\006msg_id\030\001 \002(\003\022\014\n\004c"
    "ode\030\002 \002(\005\"B\n\tMsgNotify\022\021\n\tmsg_count\030\001 \002("
    "\005\022\"\n\013msg_content\030\002 \003(\0132\r.eglcomet.Msg\".\n"
    "\021ReqCheckTokenByID\022\n\n\002id\030\001 \002(\003\022\r\n\005token\030"
    "\002 \002(\t\"4\n\021RspCheckTokenByID\022\017\n\007rescode\030\001 "
    "\002(\005\022\016\n\006resmsg\030\002 \002(\t\"4\n\024ReqCheckRelationB"
    "yID\022\016\n\006fromID\030\001 \002(\003\022\014\n\004toID\030\002 \002(\003\"7\n\024Rsp"
    "CheckRelationByID\022\017\n\007rescode\030\001 \002(\005\022\016\n\006re"
    "smsg\030\002 \002(\t\"\277\001\n\tReqPacket\022\014\n\004mask\030\001 \002(\005\022\013"
    "\n\003udi\030\002 \002(\t\022\016\n\006action\030\003 \003(\t\022\016\n\006params\030\004 "
    "\003(\014\022\r\n\005reqNo\030\005 \002(\005\022\r\n\005chnNo\030\006 \001(\005\022\016\n\006chn"
    "Pos\030\007 \001(\005\022\020\n\010clientId\030\010 \002(\005\022\021\n\tclientPos"
    "\030\t \001(\005\022\021\n\tclientVer\030\n \001(\t\022\021\n\trsaKeyVer\030\013"
    " \001(\t\"Z\n\tRspPacket\022\014\n\004mask\030\001 \002(\005\022\017\n\007resco"
    "de\030\002 \002(\005\022\016\n\006resmsg\030\003 \002(\t\022\016\n\006action\030\004 \003(\t"
    "\022\016\n\006params\030\005 \003(\014\"+\n\tRspRsaKey\022\016\n\006rsaVer\030"
    "\001 \002(\t\022\016\n\006rsaKey\030\002 \002(\t*8\n\010MaskCode\022\013\n\007DEF"
    "AULT\020\000\022\017\n\013PARAMS_GZIP\020\001\022\016\n\nPARAMS_RSA\020\002", 1399);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "comet.proto", &protobuf_RegisterTypes);
  AdminLogin::default_instance_ = new AdminLogin();
  AdminResp::default_instance_ = new AdminResp();
  C2SLogin::default_instance_ = new C2SLogin();
  S2CLogin::default_instance_ = new S2CLogin();
  OnlineStatus::default_instance_ = new OnlineStatus();
  CtrlMedia::default_instance_ = new CtrlMedia();
  SongList::default_instance_ = new SongList();
  Song::default_instance_ = new Song();
  Msg::default_instance_ = new Msg();
  MsgQuery::default_instance_ = new MsgQuery();
  MsgResp::default_instance_ = new MsgResp();
  MsgNotify::default_instance_ = new MsgNotify();
  ReqCheckTokenByID::default_instance_ = new ReqCheckTokenByID();
  RspCheckTokenByID::default_instance_ = new RspCheckTokenByID();
  ReqCheckRelationByID::default_instance_ = new ReqCheckRelationByID();
  RspCheckRelationByID::default_instance_ = new RspCheckRelationByID();
  ReqPacket::default_instance_ = new ReqPacket();
  RspPacket::default_instance_ = new RspPacket();
  RspRsaKey::default_instance_ = new RspRsaKey();
  AdminLogin::default_instance_->InitAsDefaultInstance();
  AdminResp::default_instance_->InitAsDefaultInstance();
  C2SLogin::default_instance_->InitAsDefaultInstance();
  S2CLogin::default_instance_->InitAsDefaultInstance();
  OnlineStatus::default_instance_->InitAsDefaultInstance();
  CtrlMedia::default_instance_->InitAsDefaultInstance();
  SongList::default_instance_->InitAsDefaultInstance();
  Song::default_instance_->InitAsDefaultInstance();
  Msg::default_instance_->InitAsDefaultInstance();
  MsgQuery::default_instance_->InitAsDefaultInstance();
  MsgResp::default_instance_->InitAsDefaultInstance();
  MsgNotify::default_instance_->InitAsDefaultInstance();
  ReqCheckTokenByID::default_instance_->InitAsDefaultInstance();
  RspCheckTokenByID::default_instance_->InitAsDefaultInstance();
  ReqCheckRelationByID::default_instance_->InitAsDefaultInstance();
  RspCheckRelationByID::default_instance_->InitAsDefaultInstance();
  ReqPacket::default_instance_->InitAsDefaultInstance();
  RspPacket::default_instance_->InitAsDefaultInstance();
  RspRsaKey::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_comet_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_comet_2eproto {
  StaticDescriptorInitializer_comet_2eproto() {
    protobuf_AddDesc_comet_2eproto();
  }
} static_descriptor_initializer_comet_2eproto_;
const ::google::protobuf::EnumDescriptor* MaskCode_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MaskCode_descriptor_;
}
bool MaskCode_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int AdminLogin::kIdFieldNumber;
const int AdminLogin::kPasswdFieldNumber;
const int AdminLogin::kUserAgentFieldNumber;
#endif  // !_MSC_VER

AdminLogin::AdminLogin()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AdminLogin::InitAsDefaultInstance() {
}

AdminLogin::AdminLogin(const AdminLogin& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AdminLogin::SharedCtor() {
  _cached_size_ = 0;
  id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  passwd_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  user_agent_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AdminLogin::~AdminLogin() {
  SharedDtor();
}

void AdminLogin::SharedDtor() {
  if (id_ != &::google::protobuf::internal::kEmptyString) {
    delete id_;
  }
  if (passwd_ != &::google::protobuf::internal::kEmptyString) {
    delete passwd_;
  }
  if (user_agent_ != &::google::protobuf::internal::kEmptyString) {
    delete user_agent_;
  }
  if (this != default_instance_) {
  }
}

void AdminLogin::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AdminLogin::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AdminLogin_descriptor_;
}

const AdminLogin& AdminLogin::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_comet_2eproto();
  return *default_instance_;
}

AdminLogin* AdminLogin::default_instance_ = NULL;

AdminLogin* AdminLogin::New() const {
  return new AdminLogin;
}

void AdminLogin::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_id()) {
      if (id_ != &::google::protobuf::internal::kEmptyString) {
        id_->clear();
      }
    }
    if (has_passwd()) {
      if (passwd_ != &::google::protobuf::internal::kEmptyString) {
        passwd_->clear();
      }
    }
    if (has_user_agent()) {
      if (user_agent_ != &::google::protobuf::internal::kEmptyString) {
        user_agent_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AdminLogin::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->id().data(), this->id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_passwd;
        break;
      }

      // required string passwd = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_passwd:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_passwd()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->passwd().data(), this->passwd().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_user_agent;
        break;
      }

      // optional string user_agent = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_user_agent:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_user_agent()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->user_agent().data(), this->user_agent().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AdminLogin::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->id(), output);
  }

  // required string passwd = 2;
  if (has_passwd()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->passwd().data(), this->passwd().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->passwd(), output);
  }

  // optional string user_agent = 3;
  if (has_user_agent()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->user_agent().data(), this->user_agent().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->user_agent(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AdminLogin::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->id(), target);
  }

  // required string passwd = 2;
  if (has_passwd()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->passwd().data(), this->passwd().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->passwd(), target);
  }

  // optional string user_agent = 3;
  if (has_user_agent()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->user_agent().data(), this->user_agent().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->user_agent(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AdminLogin::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->id());
    }

    // required string passwd = 2;
    if (has_passwd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->passwd());
    }

    // optional string user_agent = 3;
    if (has_user_agent()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->user_agent());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AdminLogin::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AdminLogin* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AdminLogin*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AdminLogin::MergeFrom(const AdminLogin& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_passwd()) {
      set_passwd(from.passwd());
    }
    if (from.has_user_agent()) {
      set_user_agent(from.user_agent());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AdminLogin::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AdminLogin::CopyFrom(const AdminLogin& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AdminLogin::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void AdminLogin::Swap(AdminLogin* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(passwd_, other->passwd_);
    std::swap(user_agent_, other->user_agent_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AdminLogin::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AdminLogin_descriptor_;
  metadata.reflection = AdminLogin_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AdminResp::kCodeFieldNumber;
const int AdminResp::kMsgFieldNumber;
const int AdminResp::kPortFieldNumber;
#endif  // !_MSC_VER

AdminResp::AdminResp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AdminResp::InitAsDefaultInstance() {
}

AdminResp::AdminResp(const AdminResp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AdminResp::SharedCtor() {
  _cached_size_ = 0;
  code_ = 0;
  msg_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  port_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AdminResp::~AdminResp() {
  SharedDtor();
}

void AdminResp::SharedDtor() {
  if (msg_ != &::google::protobuf::internal::kEmptyString) {
    delete msg_;
  }
  if (this != default_instance_) {
  }
}

void AdminResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AdminResp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AdminResp_descriptor_;
}

const AdminResp& AdminResp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_comet_2eproto();
  return *default_instance_;
}

AdminResp* AdminResp::default_instance_ = NULL;

AdminResp* AdminResp::New() const {
  return new AdminResp;
}

void AdminResp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    code_ = 0;
    if (has_msg()) {
      if (msg_ != &::google::protobuf::internal::kEmptyString) {
        msg_->clear();
      }
    }
    port_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AdminResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &code_)));
          set_has_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_msg;
        break;
      }

      // optional string msg = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_msg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msg()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->msg().data(), this->msg().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_port;
        break;
      }

      // optional int32 port = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_port:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &port_)));
          set_has_port();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AdminResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 code = 1;
  if (has_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->code(), output);
  }

  // optional string msg = 2;
  if (has_msg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msg().data(), this->msg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->msg(), output);
  }

  // optional int32 port = 3;
  if (has_port()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->port(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AdminResp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 code = 1;
  if (has_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->code(), target);
  }

  // optional string msg = 2;
  if (has_msg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msg().data(), this->msg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->msg(), target);
  }

  // optional int32 port = 3;
  if (has_port()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->port(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AdminResp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 code = 1;
    if (has_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->code());
    }

    // optional string msg = 2;
    if (has_msg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->msg());
    }

    // optional int32 port = 3;
    if (has_port()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->port());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AdminResp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AdminResp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AdminResp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AdminResp::MergeFrom(const AdminResp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_code()) {
      set_code(from.code());
    }
    if (from.has_msg()) {
      set_msg(from.msg());
    }
    if (from.has_port()) {
      set_port(from.port());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AdminResp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AdminResp::CopyFrom(const AdminResp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AdminResp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void AdminResp::Swap(AdminResp* other) {
  if (other != this) {
    std::swap(code_, other->code_);
    std::swap(msg_, other->msg_);
    std::swap(port_, other->port_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AdminResp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AdminResp_descriptor_;
  metadata.reflection = AdminResp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int C2SLogin::kIdFieldNumber;
const int C2SLogin::kTokenFieldNumber;
const int C2SLogin::kUserAgentFieldNumber;
#endif  // !_MSC_VER

C2SLogin::C2SLogin()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void C2SLogin::InitAsDefaultInstance() {
}

C2SLogin::C2SLogin(const C2SLogin& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void C2SLogin::SharedCtor() {
  _cached_size_ = 0;
  id_ = GOOGLE_LONGLONG(0);
  token_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  user_agent_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

C2SLogin::~C2SLogin() {
  SharedDtor();
}

void C2SLogin::SharedDtor() {
  if (token_ != &::google::protobuf::internal::kEmptyString) {
    delete token_;
  }
  if (user_agent_ != &::google::protobuf::internal::kEmptyString) {
    delete user_agent_;
  }
  if (this != default_instance_) {
  }
}

void C2SLogin::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* C2SLogin::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return C2SLogin_descriptor_;
}

const C2SLogin& C2SLogin::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_comet_2eproto();
  return *default_instance_;
}

C2SLogin* C2SLogin::default_instance_ = NULL;

C2SLogin* C2SLogin::New() const {
  return new C2SLogin;
}

void C2SLogin::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = GOOGLE_LONGLONG(0);
    if (has_token()) {
      if (token_ != &::google::protobuf::internal::kEmptyString) {
        token_->clear();
      }
    }
    if (has_user_agent()) {
      if (user_agent_ != &::google::protobuf::internal::kEmptyString) {
        user_agent_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool C2SLogin::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_token;
        break;
      }

      // required string token = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_token:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_token()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->token().data(), this->token().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_user_agent;
        break;
      }

      // optional string user_agent = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_user_agent:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_user_agent()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->user_agent().data(), this->user_agent().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void C2SLogin::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->id(), output);
  }

  // required string token = 2;
  if (has_token()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->token().data(), this->token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->token(), output);
  }

  // optional string user_agent = 3;
  if (has_user_agent()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->user_agent().data(), this->user_agent().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->user_agent(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* C2SLogin::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->id(), target);
  }

  // required string token = 2;
  if (has_token()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->token().data(), this->token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->token(), target);
  }

  // optional string user_agent = 3;
  if (has_user_agent()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->user_agent().data(), this->user_agent().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->user_agent(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int C2SLogin::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->id());
    }

    // required string token = 2;
    if (has_token()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->token());
    }

    // optional string user_agent = 3;
    if (has_user_agent()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->user_agent());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void C2SLogin::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const C2SLogin* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const C2SLogin*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void C2SLogin::MergeFrom(const C2SLogin& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_token()) {
      set_token(from.token());
    }
    if (from.has_user_agent()) {
      set_user_agent(from.user_agent());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void C2SLogin::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void C2SLogin::CopyFrom(const C2SLogin& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C2SLogin::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void C2SLogin::Swap(C2SLogin* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(token_, other->token_);
    std::swap(user_agent_, other->user_agent_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata C2SLogin::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = C2SLogin_descriptor_;
  metadata.reflection = C2SLogin_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int S2CLogin::kCodeFieldNumber;
const int S2CLogin::kMsgFieldNumber;
const int S2CLogin::kPingTimeFieldNumber;
#endif  // !_MSC_VER

S2CLogin::S2CLogin()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void S2CLogin::InitAsDefaultInstance() {
}

S2CLogin::S2CLogin(const S2CLogin& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void S2CLogin::SharedCtor() {
  _cached_size_ = 0;
  code_ = 0;
  msg_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ping_time_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

S2CLogin::~S2CLogin() {
  SharedDtor();
}

void S2CLogin::SharedDtor() {
  if (msg_ != &::google::protobuf::internal::kEmptyString) {
    delete msg_;
  }
  if (this != default_instance_) {
  }
}

void S2CLogin::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* S2CLogin::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return S2CLogin_descriptor_;
}

const S2CLogin& S2CLogin::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_comet_2eproto();
  return *default_instance_;
}

S2CLogin* S2CLogin::default_instance_ = NULL;

S2CLogin* S2CLogin::New() const {
  return new S2CLogin;
}

void S2CLogin::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    code_ = 0;
    if (has_msg()) {
      if (msg_ != &::google::protobuf::internal::kEmptyString) {
        msg_->clear();
      }
    }
    ping_time_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool S2CLogin::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &code_)));
          set_has_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_msg;
        break;
      }

      // optional string msg = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_msg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msg()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->msg().data(), this->msg().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_ping_time;
        break;
      }

      // required int32 ping_time = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ping_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ping_time_)));
          set_has_ping_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void S2CLogin::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 code = 1;
  if (has_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->code(), output);
  }

  // optional string msg = 2;
  if (has_msg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msg().data(), this->msg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->msg(), output);
  }

  // required int32 ping_time = 3;
  if (has_ping_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->ping_time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* S2CLogin::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 code = 1;
  if (has_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->code(), target);
  }

  // optional string msg = 2;
  if (has_msg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msg().data(), this->msg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->msg(), target);
  }

  // required int32 ping_time = 3;
  if (has_ping_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->ping_time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int S2CLogin::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 code = 1;
    if (has_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->code());
    }

    // optional string msg = 2;
    if (has_msg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->msg());
    }

    // required int32 ping_time = 3;
    if (has_ping_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ping_time());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void S2CLogin::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const S2CLogin* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const S2CLogin*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void S2CLogin::MergeFrom(const S2CLogin& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_code()) {
      set_code(from.code());
    }
    if (from.has_msg()) {
      set_msg(from.msg());
    }
    if (from.has_ping_time()) {
      set_ping_time(from.ping_time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void S2CLogin::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void S2CLogin::CopyFrom(const S2CLogin& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S2CLogin::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000005) != 0x00000005) return false;

  return true;
}

void S2CLogin::Swap(S2CLogin* other) {
  if (other != this) {
    std::swap(code_, other->code_);
    std::swap(msg_, other->msg_);
    std::swap(ping_time_, other->ping_time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata S2CLogin::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = S2CLogin_descriptor_;
  metadata.reflection = S2CLogin_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int OnlineStatus::kIdFieldNumber;
const int OnlineStatus::kStatusFieldNumber;
#endif  // !_MSC_VER

OnlineStatus::OnlineStatus()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void OnlineStatus::InitAsDefaultInstance() {
}

OnlineStatus::OnlineStatus(const OnlineStatus& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void OnlineStatus::SharedCtor() {
  _cached_size_ = 0;
  status_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OnlineStatus::~OnlineStatus() {
  SharedDtor();
}

void OnlineStatus::SharedDtor() {
  if (status_ != &::google::protobuf::internal::kEmptyString) {
    delete status_;
  }
  if (this != default_instance_) {
  }
}

void OnlineStatus::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OnlineStatus::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OnlineStatus_descriptor_;
}

const OnlineStatus& OnlineStatus::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_comet_2eproto();
  return *default_instance_;
}

OnlineStatus* OnlineStatus::default_instance_ = NULL;

OnlineStatus* OnlineStatus::New() const {
  return new OnlineStatus;
}

void OnlineStatus::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (has_status()) {
      if (status_ != &::google::protobuf::internal::kEmptyString) {
        status_->clear();
      }
    }
  }
  id_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool OnlineStatus::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->id(this->id_size() - 1).data(),
            this->id(this->id_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_id;
        if (input->ExpectTag(18)) goto parse_status;
        break;
      }

      // optional bytes status = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_status:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_status()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void OnlineStatus::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated string id = 1;
  for (int i = 0; i < this->id_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->id(i).data(), this->id(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->id(i), output);
  }

  // optional bytes status = 2;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->status(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* OnlineStatus::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated string id = 1;
  for (int i = 0; i < this->id_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->id(i).data(), this->id(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(1, this->id(i), target);
  }

  // optional bytes status = 2;
  if (has_status()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->status(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int OnlineStatus::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional bytes status = 2;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->status());
    }

  }
  // repeated string id = 1;
  total_size += 1 * this->id_size();
  for (int i = 0; i < this->id_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->id(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OnlineStatus::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const OnlineStatus* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const OnlineStatus*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void OnlineStatus::MergeFrom(const OnlineStatus& from) {
  GOOGLE_CHECK_NE(&from, this);
  id_.MergeFrom(from.id_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_status()) {
      set_status(from.status());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void OnlineStatus::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OnlineStatus::CopyFrom(const OnlineStatus& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OnlineStatus::IsInitialized() const {

  return true;
}

void OnlineStatus::Swap(OnlineStatus* other) {
  if (other != this) {
    id_.Swap(&other->id_);
    std::swap(status_, other->status_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata OnlineStatus::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OnlineStatus_descriptor_;
  metadata.reflection = OnlineStatus_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CtrlMedia::kCmdFieldNumber;
const int CtrlMedia::kArgsFieldNumber;
const int CtrlMedia::kArgBytesFieldNumber;
const int CtrlMedia::kSeqFieldNumber;
#endif  // !_MSC_VER

CtrlMedia::CtrlMedia()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CtrlMedia::InitAsDefaultInstance() {
}

CtrlMedia::CtrlMedia(const CtrlMedia& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CtrlMedia::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 0;
  arg_bytes_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  seq_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CtrlMedia::~CtrlMedia() {
  SharedDtor();
}

void CtrlMedia::SharedDtor() {
  if (arg_bytes_ != &::google::protobuf::internal::kEmptyString) {
    delete arg_bytes_;
  }
  if (this != default_instance_) {
  }
}

void CtrlMedia::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CtrlMedia::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CtrlMedia_descriptor_;
}

const CtrlMedia& CtrlMedia::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_comet_2eproto();
  return *default_instance_;
}

CtrlMedia* CtrlMedia::default_instance_ = NULL;

CtrlMedia* CtrlMedia::New() const {
  return new CtrlMedia;
}

void CtrlMedia::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    cmd_ = 0;
    if (has_arg_bytes()) {
      if (arg_bytes_ != &::google::protobuf::internal::kEmptyString) {
        arg_bytes_->clear();
      }
    }
    seq_ = 0;
  }
  args_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CtrlMedia::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 cmd = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cmd_)));
          set_has_cmd();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_args;
        break;
      }

      // repeated string args = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_args:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_args()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->args(this->args_size() - 1).data(),
            this->args(this->args_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_args;
        if (input->ExpectTag(26)) goto parse_arg_bytes;
        break;
      }

      // optional bytes arg_bytes = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_arg_bytes:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_arg_bytes()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_seq;
        break;
      }

      // optional int32 seq = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_seq:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &seq_)));
          set_has_seq();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CtrlMedia::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 cmd = 1;
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->cmd(), output);
  }

  // repeated string args = 2;
  for (int i = 0; i < this->args_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->args(i).data(), this->args(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->args(i), output);
  }

  // optional bytes arg_bytes = 3;
  if (has_arg_bytes()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      3, this->arg_bytes(), output);
  }

  // optional int32 seq = 4;
  if (has_seq()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->seq(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CtrlMedia::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 cmd = 1;
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->cmd(), target);
  }

  // repeated string args = 2;
  for (int i = 0; i < this->args_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->args(i).data(), this->args(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(2, this->args(i), target);
  }

  // optional bytes arg_bytes = 3;
  if (has_arg_bytes()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->arg_bytes(), target);
  }

  // optional int32 seq = 4;
  if (has_seq()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->seq(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CtrlMedia::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 cmd = 1;
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cmd());
    }

    // optional bytes arg_bytes = 3;
    if (has_arg_bytes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->arg_bytes());
    }

    // optional int32 seq = 4;
    if (has_seq()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->seq());
    }

  }
  // repeated string args = 2;
  total_size += 1 * this->args_size();
  for (int i = 0; i < this->args_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->args(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CtrlMedia::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CtrlMedia* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CtrlMedia*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CtrlMedia::MergeFrom(const CtrlMedia& from) {
  GOOGLE_CHECK_NE(&from, this);
  args_.MergeFrom(from.args_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_arg_bytes()) {
      set_arg_bytes(from.arg_bytes());
    }
    if (from.has_seq()) {
      set_seq(from.seq());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CtrlMedia::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CtrlMedia::CopyFrom(const CtrlMedia& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CtrlMedia::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void CtrlMedia::Swap(CtrlMedia* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    args_.Swap(&other->args_);
    std::swap(arg_bytes_, other->arg_bytes_);
    std::swap(seq_, other->seq_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CtrlMedia::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CtrlMedia_descriptor_;
  metadata.reflection = CtrlMedia_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SongList::kSongListIdFieldNumber;
const int SongList::kSongListTypeFieldNumber;
const int SongList::kSongListNameFieldNumber;
const int SongList::kSongsFieldNumber;
#endif  // !_MSC_VER

SongList::SongList()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SongList::InitAsDefaultInstance() {
}

SongList::SongList(const SongList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SongList::SharedCtor() {
  _cached_size_ = 0;
  song_list_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  song_list_type_ = 0;
  song_list_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SongList::~SongList() {
  SharedDtor();
}

void SongList::SharedDtor() {
  if (song_list_id_ != &::google::protobuf::internal::kEmptyString) {
    delete song_list_id_;
  }
  if (song_list_name_ != &::google::protobuf::internal::kEmptyString) {
    delete song_list_name_;
  }
  if (this != default_instance_) {
  }
}

void SongList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SongList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SongList_descriptor_;
}

const SongList& SongList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_comet_2eproto();
  return *default_instance_;
}

SongList* SongList::default_instance_ = NULL;

SongList* SongList::New() const {
  return new SongList;
}

void SongList::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_song_list_id()) {
      if (song_list_id_ != &::google::protobuf::internal::kEmptyString) {
        song_list_id_->clear();
      }
    }
    song_list_type_ = 0;
    if (has_song_list_name()) {
      if (song_list_name_ != &::google::protobuf::internal::kEmptyString) {
        song_list_name_->clear();
      }
    }
  }
  songs_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SongList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string song_list_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_song_list_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->song_list_id().data(), this->song_list_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_song_list_type;
        break;
      }

      // required int32 song_list_type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_song_list_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &song_list_type_)));
          set_has_song_list_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_song_list_name;
        break;
      }

      // optional string song_list_name = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_song_list_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_song_list_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->song_list_name().data(), this->song_list_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_songs;
        break;
      }

      // repeated .eglcomet.Song songs = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_songs:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_songs()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_songs;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SongList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string song_list_id = 1;
  if (has_song_list_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->song_list_id().data(), this->song_list_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->song_list_id(), output);
  }

  // required int32 song_list_type = 2;
  if (has_song_list_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->song_list_type(), output);
  }

  // optional string song_list_name = 3;
  if (has_song_list_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->song_list_name().data(), this->song_list_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->song_list_name(), output);
  }

  // repeated .eglcomet.Song songs = 4;
  for (int i = 0; i < this->songs_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->songs(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SongList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string song_list_id = 1;
  if (has_song_list_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->song_list_id().data(), this->song_list_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->song_list_id(), target);
  }

  // required int32 song_list_type = 2;
  if (has_song_list_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->song_list_type(), target);
  }

  // optional string song_list_name = 3;
  if (has_song_list_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->song_list_name().data(), this->song_list_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->song_list_name(), target);
  }

  // repeated .eglcomet.Song songs = 4;
  for (int i = 0; i < this->songs_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->songs(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SongList::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string song_list_id = 1;
    if (has_song_list_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->song_list_id());
    }

    // required int32 song_list_type = 2;
    if (has_song_list_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->song_list_type());
    }

    // optional string song_list_name = 3;
    if (has_song_list_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->song_list_name());
    }

  }
  // repeated .eglcomet.Song songs = 4;
  total_size += 1 * this->songs_size();
  for (int i = 0; i < this->songs_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->songs(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SongList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SongList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SongList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SongList::MergeFrom(const SongList& from) {
  GOOGLE_CHECK_NE(&from, this);
  songs_.MergeFrom(from.songs_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_song_list_id()) {
      set_song_list_id(from.song_list_id());
    }
    if (from.has_song_list_type()) {
      set_song_list_type(from.song_list_type());
    }
    if (from.has_song_list_name()) {
      set_song_list_name(from.song_list_name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SongList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SongList::CopyFrom(const SongList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SongList::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  for (int i = 0; i < songs_size(); i++) {
    if (!this->songs(i).IsInitialized()) return false;
  }
  return true;
}

void SongList::Swap(SongList* other) {
  if (other != this) {
    std::swap(song_list_id_, other->song_list_id_);
    std::swap(song_list_type_, other->song_list_type_);
    std::swap(song_list_name_, other->song_list_name_);
    songs_.Swap(&other->songs_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SongList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SongList_descriptor_;
  metadata.reflection = SongList_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Song::kSongIdFieldNumber;
const int Song::kSongNameFieldNumber;
const int Song::kSourceFieldNumber;
const int Song::kSingersFieldNumber;
const int Song::kPicUrlFieldNumber;
#endif  // !_MSC_VER

Song::Song()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Song::InitAsDefaultInstance() {
}

Song::Song(const Song& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Song::SharedCtor() {
  _cached_size_ = 0;
  song_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  song_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  source_ = 0;
  singers_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  pic_url_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Song::~Song() {
  SharedDtor();
}

void Song::SharedDtor() {
  if (song_id_ != &::google::protobuf::internal::kEmptyString) {
    delete song_id_;
  }
  if (song_name_ != &::google::protobuf::internal::kEmptyString) {
    delete song_name_;
  }
  if (singers_ != &::google::protobuf::internal::kEmptyString) {
    delete singers_;
  }
  if (pic_url_ != &::google::protobuf::internal::kEmptyString) {
    delete pic_url_;
  }
  if (this != default_instance_) {
  }
}

void Song::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Song::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Song_descriptor_;
}

const Song& Song::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_comet_2eproto();
  return *default_instance_;
}

Song* Song::default_instance_ = NULL;

Song* Song::New() const {
  return new Song;
}

void Song::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_song_id()) {
      if (song_id_ != &::google::protobuf::internal::kEmptyString) {
        song_id_->clear();
      }
    }
    if (has_song_name()) {
      if (song_name_ != &::google::protobuf::internal::kEmptyString) {
        song_name_->clear();
      }
    }
    source_ = 0;
    if (has_singers()) {
      if (singers_ != &::google::protobuf::internal::kEmptyString) {
        singers_->clear();
      }
    }
    if (has_pic_url()) {
      if (pic_url_ != &::google::protobuf::internal::kEmptyString) {
        pic_url_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Song::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string song_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_song_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->song_id().data(), this->song_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_song_name;
        break;
      }

      // required string song_name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_song_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_song_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->song_name().data(), this->song_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_source;
        break;
      }

      // required int32 source = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_source:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &source_)));
          set_has_source();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_singers;
        break;
      }

      // optional string singers = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_singers:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_singers()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->singers().data(), this->singers().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_pic_url;
        break;
      }

      // optional string pic_url = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pic_url:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_pic_url()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->pic_url().data(), this->pic_url().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Song::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string song_id = 1;
  if (has_song_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->song_id().data(), this->song_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->song_id(), output);
  }

  // required string song_name = 2;
  if (has_song_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->song_name().data(), this->song_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->song_name(), output);
  }

  // required int32 source = 3;
  if (has_source()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->source(), output);
  }

  // optional string singers = 4;
  if (has_singers()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->singers().data(), this->singers().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->singers(), output);
  }

  // optional string pic_url = 5;
  if (has_pic_url()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->pic_url().data(), this->pic_url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->pic_url(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Song::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string song_id = 1;
  if (has_song_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->song_id().data(), this->song_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->song_id(), target);
  }

  // required string song_name = 2;
  if (has_song_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->song_name().data(), this->song_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->song_name(), target);
  }

  // required int32 source = 3;
  if (has_source()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->source(), target);
  }

  // optional string singers = 4;
  if (has_singers()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->singers().data(), this->singers().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->singers(), target);
  }

  // optional string pic_url = 5;
  if (has_pic_url()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->pic_url().data(), this->pic_url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->pic_url(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Song::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string song_id = 1;
    if (has_song_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->song_id());
    }

    // required string song_name = 2;
    if (has_song_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->song_name());
    }

    // required int32 source = 3;
    if (has_source()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->source());
    }

    // optional string singers = 4;
    if (has_singers()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->singers());
    }

    // optional string pic_url = 5;
    if (has_pic_url()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->pic_url());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Song::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Song* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Song*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Song::MergeFrom(const Song& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_song_id()) {
      set_song_id(from.song_id());
    }
    if (from.has_song_name()) {
      set_song_name(from.song_name());
    }
    if (from.has_source()) {
      set_source(from.source());
    }
    if (from.has_singers()) {
      set_singers(from.singers());
    }
    if (from.has_pic_url()) {
      set_pic_url(from.pic_url());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Song::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Song::CopyFrom(const Song& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Song::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void Song::Swap(Song* other) {
  if (other != this) {
    std::swap(song_id_, other->song_id_);
    std::swap(song_name_, other->song_name_);
    std::swap(source_, other->source_);
    std::swap(singers_, other->singers_);
    std::swap(pic_url_, other->pic_url_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Song::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Song_descriptor_;
  metadata.reflection = Song_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Msg::kMsgIdFieldNumber;
const int Msg::kTypeFieldNumber;
const int Msg::kArgsFieldNumber;
const int Msg::kArgBytesFieldNumber;
const int Msg::kDateFieldNumber;
#endif  // !_MSC_VER

Msg::Msg()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Msg::InitAsDefaultInstance() {
}

Msg::Msg(const Msg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Msg::SharedCtor() {
  _cached_size_ = 0;
  msg_id_ = GOOGLE_LONGLONG(0);
  type_ = 0;
  arg_bytes_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  date_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Msg::~Msg() {
  SharedDtor();
}

void Msg::SharedDtor() {
  if (arg_bytes_ != &::google::protobuf::internal::kEmptyString) {
    delete arg_bytes_;
  }
  if (this != default_instance_) {
  }
}

void Msg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Msg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Msg_descriptor_;
}

const Msg& Msg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_comet_2eproto();
  return *default_instance_;
}

Msg* Msg::default_instance_ = NULL;

Msg* Msg::New() const {
  return new Msg;
}

void Msg::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    msg_id_ = GOOGLE_LONGLONG(0);
    type_ = 0;
    if (has_arg_bytes()) {
      if (arg_bytes_ != &::google::protobuf::internal::kEmptyString) {
        arg_bytes_->clear();
      }
    }
    date_ = GOOGLE_LONGLONG(0);
  }
  args_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Msg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 msg_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &msg_id_)));
          set_has_msg_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }

      // required int32 type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_args;
        break;
      }

      // repeated string args = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_args:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_args()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->args(this->args_size() - 1).data(),
            this->args(this->args_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_args;
        if (input->ExpectTag(34)) goto parse_arg_bytes;
        break;
      }

      // optional bytes arg_bytes = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_arg_bytes:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_arg_bytes()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_date;
        break;
      }

      // optional int64 date = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_date:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &date_)));
          set_has_date();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Msg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 msg_id = 1;
  if (has_msg_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->msg_id(), output);
  }

  // required int32 type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->type(), output);
  }

  // repeated string args = 3;
  for (int i = 0; i < this->args_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->args(i).data(), this->args(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->args(i), output);
  }

  // optional bytes arg_bytes = 4;
  if (has_arg_bytes()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      4, this->arg_bytes(), output);
  }

  // optional int64 date = 5;
  if (has_date()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->date(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Msg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 msg_id = 1;
  if (has_msg_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->msg_id(), target);
  }

  // required int32 type = 2;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->type(), target);
  }

  // repeated string args = 3;
  for (int i = 0; i < this->args_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->args(i).data(), this->args(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(3, this->args(i), target);
  }

  // optional bytes arg_bytes = 4;
  if (has_arg_bytes()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->arg_bytes(), target);
  }

  // optional int64 date = 5;
  if (has_date()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->date(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Msg::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 msg_id = 1;
    if (has_msg_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->msg_id());
    }

    // required int32 type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

    // optional bytes arg_bytes = 4;
    if (has_arg_bytes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->arg_bytes());
    }

    // optional int64 date = 5;
    if (has_date()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->date());
    }

  }
  // repeated string args = 3;
  total_size += 1 * this->args_size();
  for (int i = 0; i < this->args_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->args(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Msg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Msg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Msg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Msg::MergeFrom(const Msg& from) {
  GOOGLE_CHECK_NE(&from, this);
  args_.MergeFrom(from.args_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msg_id()) {
      set_msg_id(from.msg_id());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_arg_bytes()) {
      set_arg_bytes(from.arg_bytes());
    }
    if (from.has_date()) {
      set_date(from.date());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Msg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Msg::CopyFrom(const Msg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Msg::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void Msg::Swap(Msg* other) {
  if (other != this) {
    std::swap(msg_id_, other->msg_id_);
    std::swap(type_, other->type_);
    args_.Swap(&other->args_);
    std::swap(arg_bytes_, other->arg_bytes_);
    std::swap(date_, other->date_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Msg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Msg_descriptor_;
  metadata.reflection = Msg_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgQuery::kOptFieldNumber;
#endif  // !_MSC_VER

MsgQuery::MsgQuery()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MsgQuery::InitAsDefaultInstance() {
}

MsgQuery::MsgQuery(const MsgQuery& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MsgQuery::SharedCtor() {
  _cached_size_ = 0;
  opt_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgQuery::~MsgQuery() {
  SharedDtor();
}

void MsgQuery::SharedDtor() {
  if (opt_ != &::google::protobuf::internal::kEmptyString) {
    delete opt_;
  }
  if (this != default_instance_) {
  }
}

void MsgQuery::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgQuery::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgQuery_descriptor_;
}

const MsgQuery& MsgQuery::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_comet_2eproto();
  return *default_instance_;
}

MsgQuery* MsgQuery::default_instance_ = NULL;

MsgQuery* MsgQuery::New() const {
  return new MsgQuery;
}

void MsgQuery::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_opt()) {
      if (opt_ != &::google::protobuf::internal::kEmptyString) {
        opt_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgQuery::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string opt = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_opt()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->opt().data(), this->opt().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MsgQuery::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string opt = 1;
  if (has_opt()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->opt().data(), this->opt().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->opt(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MsgQuery::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string opt = 1;
  if (has_opt()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->opt().data(), this->opt().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->opt(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MsgQuery::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string opt = 1;
    if (has_opt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->opt());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgQuery::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgQuery* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgQuery*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgQuery::MergeFrom(const MsgQuery& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_opt()) {
      set_opt(from.opt());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgQuery::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgQuery::CopyFrom(const MsgQuery& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgQuery::IsInitialized() const {

  return true;
}

void MsgQuery::Swap(MsgQuery* other) {
  if (other != this) {
    std::swap(opt_, other->opt_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgQuery::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgQuery_descriptor_;
  metadata.reflection = MsgQuery_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgResp::kMsgIdFieldNumber;
const int MsgResp::kCodeFieldNumber;
#endif  // !_MSC_VER

MsgResp::MsgResp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MsgResp::InitAsDefaultInstance() {
}

MsgResp::MsgResp(const MsgResp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MsgResp::SharedCtor() {
  _cached_size_ = 0;
  msg_id_ = GOOGLE_LONGLONG(0);
  code_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgResp::~MsgResp() {
  SharedDtor();
}

void MsgResp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MsgResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgResp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgResp_descriptor_;
}

const MsgResp& MsgResp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_comet_2eproto();
  return *default_instance_;
}

MsgResp* MsgResp::default_instance_ = NULL;

MsgResp* MsgResp::New() const {
  return new MsgResp;
}

void MsgResp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    msg_id_ = GOOGLE_LONGLONG(0);
    code_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 msg_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &msg_id_)));
          set_has_msg_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_code;
        break;
      }

      // required int32 code = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_code:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &code_)));
          set_has_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MsgResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 msg_id = 1;
  if (has_msg_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->msg_id(), output);
  }

  // required int32 code = 2;
  if (has_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->code(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MsgResp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 msg_id = 1;
  if (has_msg_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->msg_id(), target);
  }

  // required int32 code = 2;
  if (has_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->code(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MsgResp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 msg_id = 1;
    if (has_msg_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->msg_id());
    }

    // required int32 code = 2;
    if (has_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->code());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgResp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgResp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgResp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgResp::MergeFrom(const MsgResp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msg_id()) {
      set_msg_id(from.msg_id());
    }
    if (from.has_code()) {
      set_code(from.code());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgResp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgResp::CopyFrom(const MsgResp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgResp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void MsgResp::Swap(MsgResp* other) {
  if (other != this) {
    std::swap(msg_id_, other->msg_id_);
    std::swap(code_, other->code_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgResp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgResp_descriptor_;
  metadata.reflection = MsgResp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgNotify::kMsgCountFieldNumber;
const int MsgNotify::kMsgContentFieldNumber;
#endif  // !_MSC_VER

MsgNotify::MsgNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MsgNotify::InitAsDefaultInstance() {
}

MsgNotify::MsgNotify(const MsgNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MsgNotify::SharedCtor() {
  _cached_size_ = 0;
  msg_count_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgNotify::~MsgNotify() {
  SharedDtor();
}

void MsgNotify::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MsgNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgNotify_descriptor_;
}

const MsgNotify& MsgNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_comet_2eproto();
  return *default_instance_;
}

MsgNotify* MsgNotify::default_instance_ = NULL;

MsgNotify* MsgNotify::New() const {
  return new MsgNotify;
}

void MsgNotify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    msg_count_ = 0;
  }
  msg_content_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 msg_count = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &msg_count_)));
          set_has_msg_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_msg_content;
        break;
      }

      // repeated .eglcomet.Msg msg_content = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_msg_content:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_msg_content()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_msg_content;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MsgNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 msg_count = 1;
  if (has_msg_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->msg_count(), output);
  }

  // repeated .eglcomet.Msg msg_content = 2;
  for (int i = 0; i < this->msg_content_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->msg_content(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MsgNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 msg_count = 1;
  if (has_msg_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->msg_count(), target);
  }

  // repeated .eglcomet.Msg msg_content = 2;
  for (int i = 0; i < this->msg_content_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->msg_content(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MsgNotify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 msg_count = 1;
    if (has_msg_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->msg_count());
    }

  }
  // repeated .eglcomet.Msg msg_content = 2;
  total_size += 1 * this->msg_content_size();
  for (int i = 0; i < this->msg_content_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->msg_content(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgNotify::MergeFrom(const MsgNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  msg_content_.MergeFrom(from.msg_content_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msg_count()) {
      set_msg_count(from.msg_count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgNotify::CopyFrom(const MsgNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgNotify::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < msg_content_size(); i++) {
    if (!this->msg_content(i).IsInitialized()) return false;
  }
  return true;
}

void MsgNotify::Swap(MsgNotify* other) {
  if (other != this) {
    std::swap(msg_count_, other->msg_count_);
    msg_content_.Swap(&other->msg_content_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgNotify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgNotify_descriptor_;
  metadata.reflection = MsgNotify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReqCheckTokenByID::kIdFieldNumber;
const int ReqCheckTokenByID::kTokenFieldNumber;
#endif  // !_MSC_VER

ReqCheckTokenByID::ReqCheckTokenByID()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ReqCheckTokenByID::InitAsDefaultInstance() {
}

ReqCheckTokenByID::ReqCheckTokenByID(const ReqCheckTokenByID& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ReqCheckTokenByID::SharedCtor() {
  _cached_size_ = 0;
  id_ = GOOGLE_LONGLONG(0);
  token_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReqCheckTokenByID::~ReqCheckTokenByID() {
  SharedDtor();
}

void ReqCheckTokenByID::SharedDtor() {
  if (token_ != &::google::protobuf::internal::kEmptyString) {
    delete token_;
  }
  if (this != default_instance_) {
  }
}

void ReqCheckTokenByID::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqCheckTokenByID::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqCheckTokenByID_descriptor_;
}

const ReqCheckTokenByID& ReqCheckTokenByID::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_comet_2eproto();
  return *default_instance_;
}

ReqCheckTokenByID* ReqCheckTokenByID::default_instance_ = NULL;

ReqCheckTokenByID* ReqCheckTokenByID::New() const {
  return new ReqCheckTokenByID;
}

void ReqCheckTokenByID::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = GOOGLE_LONGLONG(0);
    if (has_token()) {
      if (token_ != &::google::protobuf::internal::kEmptyString) {
        token_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReqCheckTokenByID::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_token;
        break;
      }

      // required string token = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_token:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_token()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->token().data(), this->token().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ReqCheckTokenByID::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->id(), output);
  }

  // required string token = 2;
  if (has_token()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->token().data(), this->token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->token(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ReqCheckTokenByID::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->id(), target);
  }

  // required string token = 2;
  if (has_token()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->token().data(), this->token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->token(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ReqCheckTokenByID::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->id());
    }

    // required string token = 2;
    if (has_token()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->token());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqCheckTokenByID::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReqCheckTokenByID* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReqCheckTokenByID*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReqCheckTokenByID::MergeFrom(const ReqCheckTokenByID& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_token()) {
      set_token(from.token());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReqCheckTokenByID::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqCheckTokenByID::CopyFrom(const ReqCheckTokenByID& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqCheckTokenByID::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void ReqCheckTokenByID::Swap(ReqCheckTokenByID* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(token_, other->token_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReqCheckTokenByID::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReqCheckTokenByID_descriptor_;
  metadata.reflection = ReqCheckTokenByID_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RspCheckTokenByID::kRescodeFieldNumber;
const int RspCheckTokenByID::kResmsgFieldNumber;
#endif  // !_MSC_VER

RspCheckTokenByID::RspCheckTokenByID()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RspCheckTokenByID::InitAsDefaultInstance() {
}

RspCheckTokenByID::RspCheckTokenByID(const RspCheckTokenByID& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RspCheckTokenByID::SharedCtor() {
  _cached_size_ = 0;
  rescode_ = 0;
  resmsg_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RspCheckTokenByID::~RspCheckTokenByID() {
  SharedDtor();
}

void RspCheckTokenByID::SharedDtor() {
  if (resmsg_ != &::google::protobuf::internal::kEmptyString) {
    delete resmsg_;
  }
  if (this != default_instance_) {
  }
}

void RspCheckTokenByID::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RspCheckTokenByID::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RspCheckTokenByID_descriptor_;
}

const RspCheckTokenByID& RspCheckTokenByID::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_comet_2eproto();
  return *default_instance_;
}

RspCheckTokenByID* RspCheckTokenByID::default_instance_ = NULL;

RspCheckTokenByID* RspCheckTokenByID::New() const {
  return new RspCheckTokenByID;
}

void RspCheckTokenByID::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    rescode_ = 0;
    if (has_resmsg()) {
      if (resmsg_ != &::google::protobuf::internal::kEmptyString) {
        resmsg_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RspCheckTokenByID::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 rescode = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rescode_)));
          set_has_rescode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_resmsg;
        break;
      }

      // required string resmsg = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_resmsg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_resmsg()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->resmsg().data(), this->resmsg().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RspCheckTokenByID::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 rescode = 1;
  if (has_rescode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->rescode(), output);
  }

  // required string resmsg = 2;
  if (has_resmsg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->resmsg().data(), this->resmsg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->resmsg(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RspCheckTokenByID::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 rescode = 1;
  if (has_rescode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->rescode(), target);
  }

  // required string resmsg = 2;
  if (has_resmsg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->resmsg().data(), this->resmsg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->resmsg(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RspCheckTokenByID::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 rescode = 1;
    if (has_rescode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rescode());
    }

    // required string resmsg = 2;
    if (has_resmsg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->resmsg());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RspCheckTokenByID::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RspCheckTokenByID* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RspCheckTokenByID*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RspCheckTokenByID::MergeFrom(const RspCheckTokenByID& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_rescode()) {
      set_rescode(from.rescode());
    }
    if (from.has_resmsg()) {
      set_resmsg(from.resmsg());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RspCheckTokenByID::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RspCheckTokenByID::CopyFrom(const RspCheckTokenByID& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RspCheckTokenByID::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void RspCheckTokenByID::Swap(RspCheckTokenByID* other) {
  if (other != this) {
    std::swap(rescode_, other->rescode_);
    std::swap(resmsg_, other->resmsg_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RspCheckTokenByID::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RspCheckTokenByID_descriptor_;
  metadata.reflection = RspCheckTokenByID_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReqCheckRelationByID::kFromIDFieldNumber;
const int ReqCheckRelationByID::kToIDFieldNumber;
#endif  // !_MSC_VER

ReqCheckRelationByID::ReqCheckRelationByID()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ReqCheckRelationByID::InitAsDefaultInstance() {
}

ReqCheckRelationByID::ReqCheckRelationByID(const ReqCheckRelationByID& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ReqCheckRelationByID::SharedCtor() {
  _cached_size_ = 0;
  fromid_ = GOOGLE_LONGLONG(0);
  toid_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReqCheckRelationByID::~ReqCheckRelationByID() {
  SharedDtor();
}

void ReqCheckRelationByID::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ReqCheckRelationByID::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqCheckRelationByID::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqCheckRelationByID_descriptor_;
}

const ReqCheckRelationByID& ReqCheckRelationByID::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_comet_2eproto();
  return *default_instance_;
}

ReqCheckRelationByID* ReqCheckRelationByID::default_instance_ = NULL;

ReqCheckRelationByID* ReqCheckRelationByID::New() const {
  return new ReqCheckRelationByID;
}

void ReqCheckRelationByID::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    fromid_ = GOOGLE_LONGLONG(0);
    toid_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReqCheckRelationByID::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 fromID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &fromid_)));
          set_has_fromid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_toID;
        break;
      }

      // required int64 toID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_toID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &toid_)));
          set_has_toid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ReqCheckRelationByID::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 fromID = 1;
  if (has_fromid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->fromid(), output);
  }

  // required int64 toID = 2;
  if (has_toid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->toid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ReqCheckRelationByID::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 fromID = 1;
  if (has_fromid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->fromid(), target);
  }

  // required int64 toID = 2;
  if (has_toid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->toid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ReqCheckRelationByID::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 fromID = 1;
    if (has_fromid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->fromid());
    }

    // required int64 toID = 2;
    if (has_toid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->toid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqCheckRelationByID::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReqCheckRelationByID* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReqCheckRelationByID*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReqCheckRelationByID::MergeFrom(const ReqCheckRelationByID& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_fromid()) {
      set_fromid(from.fromid());
    }
    if (from.has_toid()) {
      set_toid(from.toid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReqCheckRelationByID::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqCheckRelationByID::CopyFrom(const ReqCheckRelationByID& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqCheckRelationByID::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void ReqCheckRelationByID::Swap(ReqCheckRelationByID* other) {
  if (other != this) {
    std::swap(fromid_, other->fromid_);
    std::swap(toid_, other->toid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReqCheckRelationByID::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReqCheckRelationByID_descriptor_;
  metadata.reflection = ReqCheckRelationByID_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RspCheckRelationByID::kRescodeFieldNumber;
const int RspCheckRelationByID::kResmsgFieldNumber;
#endif  // !_MSC_VER

RspCheckRelationByID::RspCheckRelationByID()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RspCheckRelationByID::InitAsDefaultInstance() {
}

RspCheckRelationByID::RspCheckRelationByID(const RspCheckRelationByID& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RspCheckRelationByID::SharedCtor() {
  _cached_size_ = 0;
  rescode_ = 0;
  resmsg_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RspCheckRelationByID::~RspCheckRelationByID() {
  SharedDtor();
}

void RspCheckRelationByID::SharedDtor() {
  if (resmsg_ != &::google::protobuf::internal::kEmptyString) {
    delete resmsg_;
  }
  if (this != default_instance_) {
  }
}

void RspCheckRelationByID::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RspCheckRelationByID::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RspCheckRelationByID_descriptor_;
}

const RspCheckRelationByID& RspCheckRelationByID::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_comet_2eproto();
  return *default_instance_;
}

RspCheckRelationByID* RspCheckRelationByID::default_instance_ = NULL;

RspCheckRelationByID* RspCheckRelationByID::New() const {
  return new RspCheckRelationByID;
}

void RspCheckRelationByID::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    rescode_ = 0;
    if (has_resmsg()) {
      if (resmsg_ != &::google::protobuf::internal::kEmptyString) {
        resmsg_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RspCheckRelationByID::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 rescode = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rescode_)));
          set_has_rescode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_resmsg;
        break;
      }

      // required string resmsg = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_resmsg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_resmsg()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->resmsg().data(), this->resmsg().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RspCheckRelationByID::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 rescode = 1;
  if (has_rescode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->rescode(), output);
  }

  // required string resmsg = 2;
  if (has_resmsg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->resmsg().data(), this->resmsg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->resmsg(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RspCheckRelationByID::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 rescode = 1;
  if (has_rescode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->rescode(), target);
  }

  // required string resmsg = 2;
  if (has_resmsg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->resmsg().data(), this->resmsg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->resmsg(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RspCheckRelationByID::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 rescode = 1;
    if (has_rescode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rescode());
    }

    // required string resmsg = 2;
    if (has_resmsg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->resmsg());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RspCheckRelationByID::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RspCheckRelationByID* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RspCheckRelationByID*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RspCheckRelationByID::MergeFrom(const RspCheckRelationByID& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_rescode()) {
      set_rescode(from.rescode());
    }
    if (from.has_resmsg()) {
      set_resmsg(from.resmsg());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RspCheckRelationByID::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RspCheckRelationByID::CopyFrom(const RspCheckRelationByID& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RspCheckRelationByID::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void RspCheckRelationByID::Swap(RspCheckRelationByID* other) {
  if (other != this) {
    std::swap(rescode_, other->rescode_);
    std::swap(resmsg_, other->resmsg_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RspCheckRelationByID::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RspCheckRelationByID_descriptor_;
  metadata.reflection = RspCheckRelationByID_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReqPacket::kMaskFieldNumber;
const int ReqPacket::kUdiFieldNumber;
const int ReqPacket::kActionFieldNumber;
const int ReqPacket::kParamsFieldNumber;
const int ReqPacket::kReqNoFieldNumber;
const int ReqPacket::kChnNoFieldNumber;
const int ReqPacket::kChnPosFieldNumber;
const int ReqPacket::kClientIdFieldNumber;
const int ReqPacket::kClientPosFieldNumber;
const int ReqPacket::kClientVerFieldNumber;
const int ReqPacket::kRsaKeyVerFieldNumber;
#endif  // !_MSC_VER

ReqPacket::ReqPacket()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ReqPacket::InitAsDefaultInstance() {
}

ReqPacket::ReqPacket(const ReqPacket& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ReqPacket::SharedCtor() {
  _cached_size_ = 0;
  mask_ = 0;
  udi_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  reqno_ = 0;
  chnno_ = 0;
  chnpos_ = 0;
  clientid_ = 0;
  clientpos_ = 0;
  clientver_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  rsakeyver_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReqPacket::~ReqPacket() {
  SharedDtor();
}

void ReqPacket::SharedDtor() {
  if (udi_ != &::google::protobuf::internal::kEmptyString) {
    delete udi_;
  }
  if (clientver_ != &::google::protobuf::internal::kEmptyString) {
    delete clientver_;
  }
  if (rsakeyver_ != &::google::protobuf::internal::kEmptyString) {
    delete rsakeyver_;
  }
  if (this != default_instance_) {
  }
}

void ReqPacket::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqPacket::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqPacket_descriptor_;
}

const ReqPacket& ReqPacket::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_comet_2eproto();
  return *default_instance_;
}

ReqPacket* ReqPacket::default_instance_ = NULL;

ReqPacket* ReqPacket::New() const {
  return new ReqPacket;
}

void ReqPacket::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    mask_ = 0;
    if (has_udi()) {
      if (udi_ != &::google::protobuf::internal::kEmptyString) {
        udi_->clear();
      }
    }
    reqno_ = 0;
    chnno_ = 0;
    chnpos_ = 0;
    clientid_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    clientpos_ = 0;
    if (has_clientver()) {
      if (clientver_ != &::google::protobuf::internal::kEmptyString) {
        clientver_->clear();
      }
    }
    if (has_rsakeyver()) {
      if (rsakeyver_ != &::google::protobuf::internal::kEmptyString) {
        rsakeyver_->clear();
      }
    }
  }
  action_.Clear();
  params_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReqPacket::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 mask = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mask_)));
          set_has_mask();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_udi;
        break;
      }

      // required string udi = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_udi:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_udi()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->udi().data(), this->udi().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_action;
        break;
      }

      // repeated string action = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_action:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_action()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->action(this->action_size() - 1).data(),
            this->action(this->action_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_action;
        if (input->ExpectTag(34)) goto parse_params;
        break;
      }

      // repeated bytes params = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_params:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->add_params()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_params;
        if (input->ExpectTag(40)) goto parse_reqNo;
        break;
      }

      // required int32 reqNo = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_reqNo:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &reqno_)));
          set_has_reqno();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_chnNo;
        break;
      }

      // optional int32 chnNo = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_chnNo:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &chnno_)));
          set_has_chnno();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_chnPos;
        break;
      }

      // optional int32 chnPos = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_chnPos:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &chnpos_)));
          set_has_chnpos();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_clientId;
        break;
      }

      // required int32 clientId = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_clientId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &clientid_)));
          set_has_clientid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_clientPos;
        break;
      }

      // optional int32 clientPos = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_clientPos:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &clientpos_)));
          set_has_clientpos();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_clientVer;
        break;
      }

      // optional string clientVer = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_clientVer:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_clientver()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->clientver().data(), this->clientver().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_rsaKeyVer;
        break;
      }

      // optional string rsaKeyVer = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_rsaKeyVer:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_rsakeyver()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->rsakeyver().data(), this->rsakeyver().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ReqPacket::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 mask = 1;
  if (has_mask()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->mask(), output);
  }

  // required string udi = 2;
  if (has_udi()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->udi().data(), this->udi().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->udi(), output);
  }

  // repeated string action = 3;
  for (int i = 0; i < this->action_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->action(i).data(), this->action(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->action(i), output);
  }

  // repeated bytes params = 4;
  for (int i = 0; i < this->params_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      4, this->params(i), output);
  }

  // required int32 reqNo = 5;
  if (has_reqno()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->reqno(), output);
  }

  // optional int32 chnNo = 6;
  if (has_chnno()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->chnno(), output);
  }

  // optional int32 chnPos = 7;
  if (has_chnpos()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->chnpos(), output);
  }

  // required int32 clientId = 8;
  if (has_clientid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->clientid(), output);
  }

  // optional int32 clientPos = 9;
  if (has_clientpos()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->clientpos(), output);
  }

  // optional string clientVer = 10;
  if (has_clientver()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->clientver().data(), this->clientver().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      10, this->clientver(), output);
  }

  // optional string rsaKeyVer = 11;
  if (has_rsakeyver()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->rsakeyver().data(), this->rsakeyver().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      11, this->rsakeyver(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ReqPacket::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 mask = 1;
  if (has_mask()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->mask(), target);
  }

  // required string udi = 2;
  if (has_udi()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->udi().data(), this->udi().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->udi(), target);
  }

  // repeated string action = 3;
  for (int i = 0; i < this->action_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->action(i).data(), this->action(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(3, this->action(i), target);
  }

  // repeated bytes params = 4;
  for (int i = 0; i < this->params_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteBytesToArray(4, this->params(i), target);
  }

  // required int32 reqNo = 5;
  if (has_reqno()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->reqno(), target);
  }

  // optional int32 chnNo = 6;
  if (has_chnno()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->chnno(), target);
  }

  // optional int32 chnPos = 7;
  if (has_chnpos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->chnpos(), target);
  }

  // required int32 clientId = 8;
  if (has_clientid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->clientid(), target);
  }

  // optional int32 clientPos = 9;
  if (has_clientpos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->clientpos(), target);
  }

  // optional string clientVer = 10;
  if (has_clientver()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->clientver().data(), this->clientver().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->clientver(), target);
  }

  // optional string rsaKeyVer = 11;
  if (has_rsakeyver()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->rsakeyver().data(), this->rsakeyver().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->rsakeyver(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ReqPacket::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 mask = 1;
    if (has_mask()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mask());
    }

    // required string udi = 2;
    if (has_udi()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->udi());
    }

    // required int32 reqNo = 5;
    if (has_reqno()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->reqno());
    }

    // optional int32 chnNo = 6;
    if (has_chnno()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->chnno());
    }

    // optional int32 chnPos = 7;
    if (has_chnpos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->chnpos());
    }

    // required int32 clientId = 8;
    if (has_clientid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->clientid());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 clientPos = 9;
    if (has_clientpos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->clientpos());
    }

    // optional string clientVer = 10;
    if (has_clientver()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->clientver());
    }

    // optional string rsaKeyVer = 11;
    if (has_rsakeyver()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->rsakeyver());
    }

  }
  // repeated string action = 3;
  total_size += 1 * this->action_size();
  for (int i = 0; i < this->action_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->action(i));
  }

  // repeated bytes params = 4;
  total_size += 1 * this->params_size();
  for (int i = 0; i < this->params_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::BytesSize(
      this->params(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqPacket::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReqPacket* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReqPacket*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReqPacket::MergeFrom(const ReqPacket& from) {
  GOOGLE_CHECK_NE(&from, this);
  action_.MergeFrom(from.action_);
  params_.MergeFrom(from.params_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_mask()) {
      set_mask(from.mask());
    }
    if (from.has_udi()) {
      set_udi(from.udi());
    }
    if (from.has_reqno()) {
      set_reqno(from.reqno());
    }
    if (from.has_chnno()) {
      set_chnno(from.chnno());
    }
    if (from.has_chnpos()) {
      set_chnpos(from.chnpos());
    }
    if (from.has_clientid()) {
      set_clientid(from.clientid());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_clientpos()) {
      set_clientpos(from.clientpos());
    }
    if (from.has_clientver()) {
      set_clientver(from.clientver());
    }
    if (from.has_rsakeyver()) {
      set_rsakeyver(from.rsakeyver());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReqPacket::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqPacket::CopyFrom(const ReqPacket& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqPacket::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000093) != 0x00000093) return false;

  return true;
}

void ReqPacket::Swap(ReqPacket* other) {
  if (other != this) {
    std::swap(mask_, other->mask_);
    std::swap(udi_, other->udi_);
    action_.Swap(&other->action_);
    params_.Swap(&other->params_);
    std::swap(reqno_, other->reqno_);
    std::swap(chnno_, other->chnno_);
    std::swap(chnpos_, other->chnpos_);
    std::swap(clientid_, other->clientid_);
    std::swap(clientpos_, other->clientpos_);
    std::swap(clientver_, other->clientver_);
    std::swap(rsakeyver_, other->rsakeyver_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReqPacket::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReqPacket_descriptor_;
  metadata.reflection = ReqPacket_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RspPacket::kMaskFieldNumber;
const int RspPacket::kRescodeFieldNumber;
const int RspPacket::kResmsgFieldNumber;
const int RspPacket::kActionFieldNumber;
const int RspPacket::kParamsFieldNumber;
#endif  // !_MSC_VER

RspPacket::RspPacket()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RspPacket::InitAsDefaultInstance() {
}

RspPacket::RspPacket(const RspPacket& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RspPacket::SharedCtor() {
  _cached_size_ = 0;
  mask_ = 0;
  rescode_ = 0;
  resmsg_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RspPacket::~RspPacket() {
  SharedDtor();
}

void RspPacket::SharedDtor() {
  if (resmsg_ != &::google::protobuf::internal::kEmptyString) {
    delete resmsg_;
  }
  if (this != default_instance_) {
  }
}

void RspPacket::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RspPacket::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RspPacket_descriptor_;
}

const RspPacket& RspPacket::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_comet_2eproto();
  return *default_instance_;
}

RspPacket* RspPacket::default_instance_ = NULL;

RspPacket* RspPacket::New() const {
  return new RspPacket;
}

void RspPacket::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    mask_ = 0;
    rescode_ = 0;
    if (has_resmsg()) {
      if (resmsg_ != &::google::protobuf::internal::kEmptyString) {
        resmsg_->clear();
      }
    }
  }
  action_.Clear();
  params_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RspPacket::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 mask = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mask_)));
          set_has_mask();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_rescode;
        break;
      }

      // required int32 rescode = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rescode:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rescode_)));
          set_has_rescode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_resmsg;
        break;
      }

      // required string resmsg = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_resmsg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_resmsg()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->resmsg().data(), this->resmsg().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_action;
        break;
      }

      // repeated string action = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_action:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_action()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->action(this->action_size() - 1).data(),
            this->action(this->action_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_action;
        if (input->ExpectTag(42)) goto parse_params;
        break;
      }

      // repeated bytes params = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_params:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->add_params()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_params;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RspPacket::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 mask = 1;
  if (has_mask()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->mask(), output);
  }

  // required int32 rescode = 2;
  if (has_rescode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->rescode(), output);
  }

  // required string resmsg = 3;
  if (has_resmsg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->resmsg().data(), this->resmsg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->resmsg(), output);
  }

  // repeated string action = 4;
  for (int i = 0; i < this->action_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->action(i).data(), this->action(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->action(i), output);
  }

  // repeated bytes params = 5;
  for (int i = 0; i < this->params_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      5, this->params(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RspPacket::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 mask = 1;
  if (has_mask()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->mask(), target);
  }

  // required int32 rescode = 2;
  if (has_rescode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->rescode(), target);
  }

  // required string resmsg = 3;
  if (has_resmsg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->resmsg().data(), this->resmsg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->resmsg(), target);
  }

  // repeated string action = 4;
  for (int i = 0; i < this->action_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->action(i).data(), this->action(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(4, this->action(i), target);
  }

  // repeated bytes params = 5;
  for (int i = 0; i < this->params_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteBytesToArray(5, this->params(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RspPacket::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 mask = 1;
    if (has_mask()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mask());
    }

    // required int32 rescode = 2;
    if (has_rescode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rescode());
    }

    // required string resmsg = 3;
    if (has_resmsg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->resmsg());
    }

  }
  // repeated string action = 4;
  total_size += 1 * this->action_size();
  for (int i = 0; i < this->action_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->action(i));
  }

  // repeated bytes params = 5;
  total_size += 1 * this->params_size();
  for (int i = 0; i < this->params_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::BytesSize(
      this->params(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RspPacket::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RspPacket* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RspPacket*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RspPacket::MergeFrom(const RspPacket& from) {
  GOOGLE_CHECK_NE(&from, this);
  action_.MergeFrom(from.action_);
  params_.MergeFrom(from.params_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_mask()) {
      set_mask(from.mask());
    }
    if (from.has_rescode()) {
      set_rescode(from.rescode());
    }
    if (from.has_resmsg()) {
      set_resmsg(from.resmsg());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RspPacket::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RspPacket::CopyFrom(const RspPacket& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RspPacket::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void RspPacket::Swap(RspPacket* other) {
  if (other != this) {
    std::swap(mask_, other->mask_);
    std::swap(rescode_, other->rescode_);
    std::swap(resmsg_, other->resmsg_);
    action_.Swap(&other->action_);
    params_.Swap(&other->params_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RspPacket::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RspPacket_descriptor_;
  metadata.reflection = RspPacket_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RspRsaKey::kRsaVerFieldNumber;
const int RspRsaKey::kRsaKeyFieldNumber;
#endif  // !_MSC_VER

RspRsaKey::RspRsaKey()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RspRsaKey::InitAsDefaultInstance() {
}

RspRsaKey::RspRsaKey(const RspRsaKey& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RspRsaKey::SharedCtor() {
  _cached_size_ = 0;
  rsaver_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  rsakey_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RspRsaKey::~RspRsaKey() {
  SharedDtor();
}

void RspRsaKey::SharedDtor() {
  if (rsaver_ != &::google::protobuf::internal::kEmptyString) {
    delete rsaver_;
  }
  if (rsakey_ != &::google::protobuf::internal::kEmptyString) {
    delete rsakey_;
  }
  if (this != default_instance_) {
  }
}

void RspRsaKey::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RspRsaKey::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RspRsaKey_descriptor_;
}

const RspRsaKey& RspRsaKey::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_comet_2eproto();
  return *default_instance_;
}

RspRsaKey* RspRsaKey::default_instance_ = NULL;

RspRsaKey* RspRsaKey::New() const {
  return new RspRsaKey;
}

void RspRsaKey::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_rsaver()) {
      if (rsaver_ != &::google::protobuf::internal::kEmptyString) {
        rsaver_->clear();
      }
    }
    if (has_rsakey()) {
      if (rsakey_ != &::google::protobuf::internal::kEmptyString) {
        rsakey_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RspRsaKey::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string rsaVer = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_rsaver()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->rsaver().data(), this->rsaver().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_rsaKey;
        break;
      }

      // required string rsaKey = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_rsaKey:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_rsakey()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->rsakey().data(), this->rsakey().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RspRsaKey::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string rsaVer = 1;
  if (has_rsaver()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->rsaver().data(), this->rsaver().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->rsaver(), output);
  }

  // required string rsaKey = 2;
  if (has_rsakey()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->rsakey().data(), this->rsakey().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->rsakey(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RspRsaKey::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string rsaVer = 1;
  if (has_rsaver()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->rsaver().data(), this->rsaver().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->rsaver(), target);
  }

  // required string rsaKey = 2;
  if (has_rsakey()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->rsakey().data(), this->rsakey().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->rsakey(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RspRsaKey::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string rsaVer = 1;
    if (has_rsaver()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->rsaver());
    }

    // required string rsaKey = 2;
    if (has_rsakey()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->rsakey());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RspRsaKey::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RspRsaKey* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RspRsaKey*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RspRsaKey::MergeFrom(const RspRsaKey& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_rsaver()) {
      set_rsaver(from.rsaver());
    }
    if (from.has_rsakey()) {
      set_rsakey(from.rsakey());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RspRsaKey::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RspRsaKey::CopyFrom(const RspRsaKey& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RspRsaKey::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void RspRsaKey::Swap(RspRsaKey* other) {
  if (other != this) {
    std::swap(rsaver_, other->rsaver_);
    std::swap(rsakey_, other->rsakey_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RspRsaKey::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RspRsaKey_descriptor_;
  metadata.reflection = RspRsaKey_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace eglcomet

// @@protoc_insertion_point(global_scope)
